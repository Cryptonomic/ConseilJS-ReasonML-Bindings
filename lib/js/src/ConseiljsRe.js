// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';

var Type = require("./Type.js");
var TezosType = require("./TezosType.js");
var Conseiljs = require("conseiljs");

function blankQuery(param) {
  return Conseiljs.ConseilQueryBuilder.blankQuery();
}

function addPredicate(query, field, operation, values, invert) {
  return Conseiljs.ConseilQueryBuilder.addPredicate(query, field, Type.operatorToString(operation), values, invert);
}

function addField(query, field) {
  return Conseiljs.ConseilQueryBuilder.addFields(query, field);
}

function addFields(_query, _fields) {
  while(true) {
    var fields = _fields;
    var query = _query;
    if (fields) {
      var query$1 = addField(query, fields[0]);
      _fields = fields[1];
      _query = query$1;
      continue ;
    } else {
      return query;
    }
  };
}

function addOrdering(query, field, direction) {
  return Conseiljs.ConseilQueryBuilder.addOrdering(query, field, Type.sortDirectionToString(direction));
}

function setLimit(query, limit) {
  return Conseiljs.ConseilQueryBuilder.setLimit(query, limit);
}

function setOutputType(query, outputType) {
  return Conseiljs.ConseilQueryBuilder.setOutputType(query, Type.outputToString(outputType));
}

function addAggregationFunction(query, field, func) {
  return Conseiljs.ConseilQueryBuilder.addAggregationFunction(query, field, Type.functionToString(func));
}

var ConseilQueryBuilder = /* module */[
  /* blankQuery */blankQuery,
  /* addPredicate */addPredicate,
  /* addField */addField,
  /* addFields */addFields,
  /* addOrdering */addOrdering,
  /* setLimit */setLimit,
  /* setOutputType */setOutputType,
  /* addAggregationFunction */addAggregationFunction
];

function getTezosEntityData(serverInfo, network, entity, query) {
  return Conseiljs.TezosConseilClient.getTezosEntityData(serverInfo, network, entity, query);
}

function getBlock(serverInfo, network, hash) {
  return Conseiljs.TezosConseilClient.getBlock(serverInfo, network, hash);
}

function getBlockHead(serverInfo, network) {
  return Conseiljs.TezosConseilClient.getBlockHead(serverInfo, network);
}

function getBlockByLevel(serverInfo, network, level) {
  return Conseiljs.TezosConseilClient.getBlockByLevel(serverInfo, network, level);
}

function getOperationGroup(serverInfo, network, id) {
  return Conseiljs.TezosConseilClient.getOperationGroup(serverInfo, network, id);
}

function getBlocks(serverInfo, network, query) {
  return Conseiljs.TezosConseilClient.getBlocks(serverInfo, network, query);
}

function getAccounts(serverInfo, network, query) {
  return Conseiljs.TezosConseilClient.getAccounts(serverInfo, network, query);
}

function getOperationGroups(serverInfo, network, query) {
  return Conseiljs.TezosConseilClient.getOperationGroups(serverInfo, network, query);
}

function getOperations(serverInfo, network, query) {
  return Conseiljs.TezosConseilClient.getOperations(serverInfo, network, query);
}

function getFeeStatistics(serverInfo, network, operationType) {
  return Conseiljs.TezosConseilClient.getFeeStatistics(serverInfo, network, Type.operationKindTypeToString(operationType));
}

function getProposals(serverInfo, network, query) {
  return Conseiljs.TezosConseilClient.getProposals(serverInfo, network, query);
}

function getBakers(serverInfo, network, query) {
  return Conseiljs.TezosConseilClient.getBakers(serverInfo, network, query);
}

function getBallots(serverInfo, network, query) {
  return Conseiljs.TezosConseilClient.getBallots(serverInfo, network, query);
}

function awaitOperationConfirmation(serverInfo, network, hash, duration) {
  return Conseiljs.TezosConseilClient.awaitOperationConfirmation(serverInfo, network, hash, duration);
}

function awaitOperationForkConfirmation(serverInfo, network, hash, duration, depth) {
  return Conseiljs.TezosConseilClient.awaitOperationForkConfirmation(serverInfo, network, hash, duration, depth);
}

var TezosConseilClient = /* module */[
  /* getTezosEntityData */getTezosEntityData,
  /* getBlock */getBlock,
  /* getBlockHead */getBlockHead,
  /* getBlockByLevel */getBlockByLevel,
  /* getOperationGroup */getOperationGroup,
  /* getBlocks */getBlocks,
  /* getAccounts */getAccounts,
  /* getOperationGroups */getOperationGroups,
  /* getOperations */getOperations,
  /* getFeeStatistics */getFeeStatistics,
  /* getProposals */getProposals,
  /* getBakers */getBakers,
  /* getBallots */getBallots,
  /* awaitOperationConfirmation */awaitOperationConfirmation,
  /* awaitOperationForkConfirmation */awaitOperationForkConfirmation
];

function hexToMicheline(hex) {
  return Conseiljs.TezosLanguageUtil.hexToMicheline(hex);
}

function translateMichelsonToMicheline(code) {
  return Conseiljs.TezosLanguageUtil.translateMichelsonToMicheline(code);
}

function translateMichelsonToHex(code) {
  return Conseiljs.TezosLanguageUtil.translateMichelsonToHex(code);
}

function translateMichelineToHex(code) {
  return Conseiljs.TezosLanguageUtil.translateMichelineToHex(code);
}

function preProcessMichelsonScript(code) {
  return Conseiljs.TezosLanguageUtil.preProcessMichelsonScript(code);
}

function normalizeMichelineWhiteSpace(fragment) {
  return Conseiljs.TezosLanguageUtil.normalizeMichelineWhiteSpace(fragment);
}

var TezosLanguageUtil = /* module */[
  /* hexToMicheline */hexToMicheline,
  /* translateMichelsonToMicheline */translateMichelsonToMicheline,
  /* translateMichelsonToHex */translateMichelsonToHex,
  /* translateMichelineToHex */translateMichelineToHex,
  /* preProcessMichelsonScript */preProcessMichelsonScript,
  /* normalizeMichelineWhiteSpace */normalizeMichelineWhiteSpace
];

function writeBoolean(value) {
  return Conseiljs.TezosMessageUtils.writeBoolean(value);
}

function readBoolean(hex) {
  return Conseiljs.TezosMessageUtils.readBoolean(hex);
}

function writeInt(value) {
  return Conseiljs.TezosMessageUtils.writeInt(value);
}

function writeSignedInt(value) {
  return Conseiljs.TezosMessageUtils.writeSignedInt(value);
}

function readInt(hex) {
  return Conseiljs.TezosMessageUtils.readInt(hex);
}

function readSignedInt(hex) {
  return Conseiljs.TezosMessageUtils.readSignedInt(hex);
}

function findInt(hex, offset, signed) {
  return Conseiljs.TezosMessageUtils.findInt(hex, offset, signed);
}

function readAddress(hex) {
  return Conseiljs.TezosMessageUtils.readAddress(hex);
}

function readAddressWithHint(b, hex) {
  return Conseiljs.TezosMessageUtils.readAddressWithHint(b, hex);
}

function writeAddress(address) {
  return Conseiljs.TezosMessageUtils.writeAddress(address);
}

function readBranch(hex) {
  return Conseiljs.TezosMessageUtils.readBranch(hex);
}

function writeBranch(branch) {
  return Conseiljs.TezosMessageUtils.writeBranch(branch);
}

function readPublicKey(hex) {
  return Conseiljs.TezosMessageUtils.readPublicKey(hex);
}

function writePublicKey(publicKey) {
  return Conseiljs.TezosMessageUtils.writePublicKey(publicKey);
}

function readKeyWithHint(b, hint) {
  return Conseiljs.TezosMessageUtils.readKeyWithHint(b, hint);
}

function writeKeyWithHint(key, hint) {
  return Conseiljs.TezosMessageUtils.writeKeyWithHint(key, hint);
}

function readSignatureWithHint(b, hint) {
  return Conseiljs.TezosMessageUtils.readSignatureWithHint(b, hint);
}

function readBufferWithHint(b, hint) {
  return Conseiljs.TezosMessageUtils.readBufferWithHint(b, hint);
}

function writeBufferWithHint(b) {
  return Conseiljs.TezosMessageUtils.writeBufferWithHint(b);
}

function computeOperationHash(signedOpGroup) {
  return Conseiljs.TezosMessageUtils.computeOperationHash(signedOpGroup);
}

function computeKeyHash(key, prefix) {
  return Conseiljs.TezosMessageUtils.computeKeyHash(key, prefix);
}

var TezosMessageUtils = /* module */[
  /* writeBoolean */writeBoolean,
  /* readBoolean */readBoolean,
  /* writeInt */writeInt,
  /* writeSignedInt */writeSignedInt,
  /* readInt */readInt,
  /* readSignedInt */readSignedInt,
  /* findInt */findInt,
  /* readAddress */readAddress,
  /* readAddressWithHint */readAddressWithHint,
  /* writeAddress */writeAddress,
  /* readBranch */readBranch,
  /* writeBranch */writeBranch,
  /* readPublicKey */readPublicKey,
  /* writePublicKey */writePublicKey,
  /* readKeyWithHint */readKeyWithHint,
  /* writeKeyWithHint */writeKeyWithHint,
  /* readSignatureWithHint */readSignatureWithHint,
  /* readBufferWithHint */readBufferWithHint,
  /* writeBufferWithHint */writeBufferWithHint,
  /* computeOperationHash */computeOperationHash,
  /* computeKeyHash */computeKeyHash
];

function getBlock$1(server, hash) {
  return Conseiljs.TezosNodeReader.getBlock(server, hash);
}

function getBlockHead$1(server) {
  return Conseiljs.TezosNodeReader.getBlockHead(server);
}

function getAccountForBlock(server, blockHash, accountHash) {
  return Conseiljs.TezosNodeReader.getAccountForBlock(server, blockHash, accountHash);
}

function getCounterForAccount(server, accountHash) {
  return Conseiljs.TezosNodeReader.getCounterForAccount(server, accountHash);
}

function getAccountManagerForBlock(server, blockHash, accountHash) {
  return Conseiljs.TezosNodeReader.getAccountManagerForBlock(server, blockHash, accountHash);
}

function isImplicitAndEmpty(server, accountHash) {
  return Conseiljs.TezosNodeReader.isImplicitAndEmpty(server, accountHash);
}

function isManagerKeyRevealedForAccount(server, accountHash) {
  return Conseiljs.TezosNodeReader.isManagerKeyRevealedForAccount(server, accountHash);
}

var TezosNodeReader = /* module */[
  /* getBlock */getBlock$1,
  /* getBlockHead */getBlockHead$1,
  /* getAccountForBlock */getAccountForBlock,
  /* getCounterForAccount */getCounterForAccount,
  /* getAccountManagerForBlock */getAccountManagerForBlock,
  /* isImplicitAndEmpty */isImplicitAndEmpty,
  /* isManagerKeyRevealedForAccount */isManagerKeyRevealedForAccount
];

function signOperationGroup(forgedOperation, keyStore, derivationPath) {
  return Conseiljs.TezosNodeWriter.signOperationGroup(forgedOperation, keyStore, derivationPath);
}

function forgeOperations(branch, operations) {
  return Conseiljs.TezosNodeWriter.forgeOperations(branch, operations);
}

function forgeOperationsRemotely(server, blockHead, operations) {
  return Conseiljs.TezosNodeWriter.forgeOperationsRemotely(server, blockHead, operations);
}

function applyOperation(server, branch, protocol, operations, signedOpGroup) {
  return Conseiljs.TezosNodeWriter.applyOperation(server, branch, protocol, operations, signedOpGroup);
}

function injectOperation(server, signedOpGroup) {
  return Conseiljs.TezosNodeWriter.injectOperation(server, signedOpGroup);
}

function sendOperation(server, operations, keyStore, path) {
  return Conseiljs.TezosNodeWriter.sendOperation(server, operations, keyStore, path);
}

function appendRevealOperation(server, keyStore, accountHash, index, operations) {
  return Conseiljs.TezosNodeWriter.appendRevealOperation(server, keyStore, accountHash, index, operations);
}

function sendTransactionOperation(server, keyStore, _to, amount, fee, path) {
  return Conseiljs.TezosNodeWriter.sendTransactionOperation(server, keyStore, _to, amount, fee, path);
}

function sendDelegationOperation(server, keyStore, delegator, delegate, fee, path) {
  return Conseiljs.TezosNodeWriter.sendDelegationOperation(server, keyStore, delegator, delegate, fee, path);
}

function sendUndelegationOperation(server, keyStore, delegator, fee, path) {
  return Conseiljs.TezosNodeWriter.sendUndelegationOperation(server, keyStore, delegator, fee, path);
}

function sendAccountOriginationOperation(server, keyStore, amount, delegate, spendable, delegatable, fee, path) {
  return Conseiljs.TezosNodeWriter.sendAccountOriginationOperation(server, keyStore, amount, delegate, spendable, delegatable, fee, path);
}

function sendContractOriginationOperation(server, keyStore, amount, delegate, spendable, delegatable, fee, path, storage_limit, gas_limit, code, storage, codeFormat) {
  return Conseiljs.TezosNodeWriter.sendContractOriginationOperation(server, keyStore, amount, delegate, spendable, delegatable, fee, path, storage_limit, gas_limit, code, storage, TezosType.tezosParameterFormatToString(codeFormat));
}

function sendContractInvocationOperation(server, keyStore, _to, amount, fee, path, storage_limit, gas_limit, parameters, codeFormat) {
  return Conseiljs.TezosNodeWriter.sendContractInvocationOperation(server, keyStore, _to, amount, fee, path, storage_limit, gas_limit, parameters, TezosType.tezosParameterFormatToString(codeFormat));
}

function sendContractPing(server, keyStore, _to, fee, path, storage_limit, gas_limit) {
  return Conseiljs.TezosNodeWriter.sendContractPing(server, keyStore, _to, fee, path, storage_limit, gas_limit);
}

function sendKeyRevealOperation(server, keyStore, fee, path) {
  return Conseiljs.TezosNodeWriter.sendKeyRevealOperation(server, keyStore, fee, path);
}

function sendIdentityActivationOperation(server, keyStore, code, path) {
  return Conseiljs.TezosNodeWriter.sendIdentityActivationOperation(server, keyStore, code, path);
}

var TezosNodeWriter = /* module */[
  /* signOperationGroup */signOperationGroup,
  /* forgeOperations */forgeOperations,
  /* forgeOperationsRemotely */forgeOperationsRemotely,
  /* applyOperation */applyOperation,
  /* injectOperation */injectOperation,
  /* sendOperation */sendOperation,
  /* appendRevealOperation */appendRevealOperation,
  /* sendTransactionOperation */sendTransactionOperation,
  /* sendDelegationOperation */sendDelegationOperation,
  /* sendUndelegationOperation */sendUndelegationOperation,
  /* sendAccountOriginationOperation */sendAccountOriginationOperation,
  /* sendContractOriginationOperation */sendContractOriginationOperation,
  /* sendContractInvocationOperation */sendContractInvocationOperation,
  /* sendContractPing */sendContractPing,
  /* sendKeyRevealOperation */sendKeyRevealOperation,
  /* sendIdentityActivationOperation */sendIdentityActivationOperation
];

function unlockFundraiserIdentity(mnemonic, email, password, pkh) {
  return Conseiljs.TezosWalletUtil.unlockFundraiserIdentity(mnemonic, email, password, pkh);
}

function restoreIdentityWithSecretKey(keyString) {
  return Conseiljs.TezosWalletUtil.restoreIdentityWithSecretKey(keyString);
}

function generateMnemonic(strength) {
  return Conseiljs.TezosWalletUtil.generateMnemonic(strength);
}

function unlockIdentityWithMnemonic(mnemonic, passphrase) {
  return Conseiljs.TezosWalletUtil.unlockIdentityWithMnemonic(mnemonic, passphrase);
}

function getKeysFromMnemonicAndPassphrase(mnemonic, passphrase, storeType, pkh) {
  return Conseiljs.TezosWalletUtil.getKeysFromMnemonicAndPassphrase(mnemonic, passphrase, Type.storeTypeToInt(storeType), pkh);
}

var TezosWalletUtil = /* module */[
  /* unlockFundraiserIdentity */unlockFundraiserIdentity,
  /* restoreIdentityWithSecretKey */restoreIdentityWithSecretKey,
  /* generateMnemonic */generateMnemonic,
  /* unlockIdentityWithMnemonic */unlockIdentityWithMnemonic,
  /* getKeysFromMnemonicAndPassphrase */getKeysFromMnemonicAndPassphrase
];

function saveWallet(filename, wallet, passphrase) {
  return Conseiljs.TezosFileWallet.saveWallet(filename, wallet, passphrase);
}

function loadWallet(filename, passphrase) {
  return Conseiljs.TezosFileWallet.loadWallet(filename, passphrase);
}

function createWallet(filename, passphrase) {
  return Conseiljs.TezosFileWallet.createWallet(filename, passphrase);
}

var TezosFileWallet = /* module */[
  /* saveWallet */saveWallet,
  /* loadWallet */loadWallet,
  /* createWallet */createWallet
];

function executeEntityQuery(serverInfo, platform, network, entity, query) {
  return Conseiljs.ConseilDataClient.executeEntityQuery(serverInfo, platform, network, entity, query);
}

var ConseilDataClient = /* module */[/* executeEntityQuery */executeEntityQuery];

function executeMetadataQuery(serverInfo, route) {
  return Conseiljs.ConseilMetadataClient.executeMetadataQuery(serverInfo, route);
}

function getPlatforms(serverInfo) {
  return Conseiljs.ConseilMetadataClient.getPlatforms(serverInfo);
}

function getNetworks(serverInfo, platform) {
  return Conseiljs.ConseilMetadataClient.getNetworks(serverInfo, platform);
}

function getEntities(serverInfo, platform, network) {
  return Conseiljs.ConseilMetadataClient.getEntities(serverInfo, platform, network);
}

function getAttributes(serverInfo, platform, network, entity) {
  return Conseiljs.ConseilMetadataClient.getAttributes(serverInfo, platform, network, entity);
}

function getAttributeValues(serverInfo, platform, network, entity, attribute) {
  return Conseiljs.ConseilMetadataClient.getAttributeValues(serverInfo, platform, network, entity, attribute);
}

function getAttributeValuesForPrefix(serverInfo, platform, network, entity, attribute, prefix) {
  return Conseiljs.ConseilMetadataClient.getAttributeValuesForPrefix(serverInfo, platform, network, entity, attribute, prefix);
}

var ConseilMetadataClient = /* module */[
  /* executeMetadataQuery */executeMetadataQuery,
  /* getPlatforms */getPlatforms,
  /* getNetworks */getNetworks,
  /* getEntities */getEntities,
  /* getAttributes */getAttributes,
  /* getAttributeValues */getAttributeValues,
  /* getAttributeValuesForPrefix */getAttributeValuesForPrefix
];

exports.ConseilQueryBuilder = ConseilQueryBuilder;
exports.TezosConseilClient = TezosConseilClient;
exports.TezosLanguageUtil = TezosLanguageUtil;
exports.TezosMessageUtils = TezosMessageUtils;
exports.TezosNodeReader = TezosNodeReader;
exports.TezosNodeWriter = TezosNodeWriter;
exports.TezosWalletUtil = TezosWalletUtil;
exports.TezosFileWallet = TezosFileWallet;
exports.ConseilDataClient = ConseilDataClient;
exports.ConseilMetadataClient = ConseilMetadataClient;
/* conseiljs Not a pure module */
