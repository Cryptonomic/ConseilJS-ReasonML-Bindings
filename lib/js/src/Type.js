// Generated by BUCKLESCRIPT VERSION 5.0.6, PLEASE EDIT WITH CARE
'use strict';


function operatorToString(conseilOperator) {
  switch (conseilOperator) {
    case 0 : 
        return "between";
    case 1 : 
        return "eq";
    case 2 : 
        return "in";
    case 3 : 
        return "like";
    case 4 : 
        return "lt";
    case 5 : 
        return "before";
    case 6 : 
        return "gt";
    case 7 : 
        return "after";
    case 8 : 
        return "startsWith";
    case 9 : 
        return "endsWith";
    case 10 : 
        return "isnull";
    
  }
}

function functionToString(conseilFunction) {
  switch (conseilFunction) {
    case 0 : 
        return "avg";
    case 1 : 
        return "count";
    case 2 : 
        return "max";
    case 3 : 
        return "min";
    case 4 : 
        return "sum";
    
  }
}

function sortDirectionToString(conseilSortDirection) {
  if (conseilSortDirection) {
    return "desc";
  } else {
    return "asc";
  }
}

function outputToString(conseilOutput) {
  if (conseilOutput) {
    return "json";
  } else {
    return "csv";
  }
}

function operationKindTypeToString(operationKindType) {
  switch (operationKindType) {
    case 0 : 
        return "seed_nonce_revelation";
    case 1 : 
        return "delegation";
    case 2 : 
        return "transaction";
    case 3 : 
        return "activate_account";
    case 4 : 
        return "origination";
    case 5 : 
        return "reveal";
    case 6 : 
        return "endorsement";
    case 7 : 
        return "ballot";
    
  }
}

function storeTypeToInt(storeType) {
  return storeType;
}

function attrbuteDataTypeToString(attrbuteDataType) {
  switch (attrbuteDataType) {
    case 0 : 
        return "String";
    case 1 : 
        return "Int";
    case 2 : 
        return "Decimal";
    case 3 : 
        return "Boolean";
    case 4 : 
        return "AccountAddress";
    case 5 : 
        return "Hash";
    case 6 : 
        return "DateTime";
    case 7 : 
        return "Currency";
    
  }
}

function attrbuteKeyTypeToString(attrbuteKeyType) {
  switch (attrbuteKeyType) {
    case 0 : 
        return "PrimaryKey";
    case 1 : 
        return "UniqueKey";
    case 2 : 
        return "NonKey";
    
  }
}

exports.operatorToString = operatorToString;
exports.functionToString = functionToString;
exports.sortDirectionToString = sortDirectionToString;
exports.outputToString = outputToString;
exports.operationKindTypeToString = operationKindTypeToString;
exports.storeTypeToInt = storeTypeToInt;
exports.attrbuteDataTypeToString = attrbuteDataTypeToString;
exports.attrbuteKeyTypeToString = attrbuteKeyTypeToString;
/* No side effect */
